type ptr = *void

const FUTEX_WAIT = 0
const FUTEX_WAKE = 1
const FUTEX_PRIVATE_FLAG = 128

const FUTEX_WAIT_PRIVATE = FUTEX_WAIT | FUTEX_PRIVATE_FLAG
const FUTEX_WAKE_PRIVATE = FUTEX_WAKE | FUTEX_PRIVATE_FLAG

fn sys_write(fd: int, buff: ptr, len: int) -> int {
    syscall(1, fd, buff, len)
}

fn sys_exit(code: int) -> void {
    syscall(60, code)
}

fn brk(addr: ptr) -> ptr {
    syscall(12, addr) // For !safe manual operations
}

fn mmap(addr: ptr, len: int, prot: int, flags: int, fd: int, offset: int) -> ptr {
    syscall(9, addr, len, prot, flags, fd, offset)
}

fn munmap(addr: ptr, len: int) -> int {
    syscall(11, addr, len)
}

fn getpid() -> int {
    syscall(39)
}

fn gettid() -> int {
    syscall(186)
}

fn fork() -> int {
    syscall(57)
}

fn execve(path: ptr, argv: ptr, envp: ptr) -> int {
    syscall(59, path, argv, envp)
}

fn clone(flags: int, stack: ptr, entry: fn(func: ptr, arg: ptr) -> void) -> int {
    syscall(56, flags, stack, entry)
}

fn set_tid_address(addr: ptr) -> int {
    syscall(218, addr)
}

fn nanosleep(req: ptr, rem: ptr) -> int {
    syscall(35, req, rem)
}

fn sched_yield() -> int {
    syscall(24)
}

fn futex(uaddr: ptr, op: int, val: int, timeout: ptr, uaddr2: ptr, val3: int) -> int {
    syscall(202, uaddr, op, val, timeout, uaddr2, val3)
}

fn futex_wait(addr: ptr, expected: int, timeout: ptr) -> int {
    futex(addr, FUTEX_WAIT_PRIVATE, expected, timeout, null, 0)
}

fn futex_wake(addr: ptr, count: int) -> int {
    futex(addr, FUTEX_WAKE_PRIVATE, count, null, null, 0)
}
