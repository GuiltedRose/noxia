import "./stdlibnx/alloc"
import "./stdlibnx/string"

const HEADER_SIZE = 8
global last_alloc: ptr = 0

fn malloc(size: int) -> ptr {
    let total = size + HEADER_SIZE
    let raw = sbrk(total)
    last_alloc = raw + total
    let meta = cast(raw as *int)
    meta[0] = size
    return raw + HEADER_SIZE
}

fn free(ptr: ptr) -> void {
    let meta_ptr = ptr - HEADER_SIZE
    let size = cast(meta_ptr as *int)[0]

    let total = size + HEADER_SIZE
    brk(meta_ptr)

    if meta_ptr + total == last_alloc {
        brk(meta_ptr)
        last_alloc = meta_ptr // step back
    }
}

fn calloc(size: int) -> ptr {
    let ptr = malloc(size)
    memset(ptr, 0, size)
    return ptr
}
